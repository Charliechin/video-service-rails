.step(data-title='Starting a Video Call', data-file='app/assets/javascripts/app.js')
  h2 Starting a video support call

  blockquote 
    | As an agent, I would like to click on a support request to initiate a video conversation with the user.
  :markdown
    Time to get to the meat of this use-case. In this section we will build the largest chunk of the functionality, in which a Customer Support agent can initiate a vide call with a specific User chosen from a list of open support tickets. 

    To do this we need to implement:

    * Creating an Access Token
    * An Endpoint for the user
    * An Endpoint for the agent
    * A Conversation between the two parties

    Let's start by looking at the first piece of the connection, the Access Token.

.step(data-title='Generating a Capability Token', data-file='app/controllers/concerns/generate_token.rb')
  :markdown
    ## Generating an Access Token

    Access tokens allow you to add Twilio capabilities to web and mobile applications without exposing your AuthToken in JavaScript or any other client-side environment. The logic to create this secure token is found here - generating the token has two major steps:

    * Obtain a signing key once from Twilio to allow us to create access tokens
    * Give every page that requests one an access token enabling that browser to both create and accept invitations to converstions.

    One last note about this code is that we need to access it from multiple controllers and on multiple pages, therefore we are putting inside of a Rails [Concern](//api.rubyonrails.org/classes/ActiveSupport/Concern.html) which allows for code to be easily shared across files.

  p Now let's finally talk about Endpoints.

.step(data-title='Creating an Endpoint', data-file='app/assets/javascripts/app.js', data-highlight="4-22")
  :markdown
    ## Creating an Endpoint

    What is an Endpoint? Well simply put an Endpoint is one side of a Conversation. It is identified by an address (string) and once it's created it gives us control over the Conversation and therefore the entre Video call.

    In this use-case we will need to create an Endpoint for both the agent and the user. 

      * Create user endpoint: we did this earlier, when the user requested support.
      * Create agent endpoint: we'll do this next when the Agent initiates a call.

    To create an Endpoint we first need to pass it our capability token. In this case our token is being passed to the front-end by our controller. Let's take a quick detour to look at the front-end.

.step(data-title='The Application Layout', data-file='app/views/layouts/application.html.erb', data-highlight="52-62")
  :markdown
    ## The Application Layout

    Our layout, which all other pages render inside of, contains most of the elements for our Video call. 

    ### Displaying Video

    The Twilio Video SDK will handle attaching both the local input from the web cam and remote video data inside DOM elements that we specify. We create those container elements here.

    ### Access Token JavaScript Object

    In order to instatiate our Endpoint we pass the server-generated access token to the front-end. 

    Okay, now that we have our markup, our token and our Endpoint, let's create a Conversation.

.step(data-title='Starting a Conversation', data-file='app/assets/javascripts/app.js', data-highlight="89-103")
  :markdown
    ## Starting a Conversation

    At this point our agent is ready to initiate a call which means we need one very important piece of information, the user's Endpoint address. 

    Luckily, we stored this address in the support ticket, so all we need to do is grab it from the UI. One easy way to store this information is to simply assign a data attribute to it:

    ``` 
      <a class='connect-call btn-block btn btn-success' data-endpoint="<%= ticket.endpoint %>"
          data-ticket="<%= ticket.id %>" href="#" >Call customer</a>
    ```

    We'll also store the `ticket.id` so that we can delete the support ticket once our call is connected.

    Now let's slide up to the function that will call our customer, using our newly acquired address.

.step(data-title='Calling the Customer', data-file='app/assets/javascripts/app.js', data-highlight="67-86")
  :markdown
    ## Calling the Customer

    In order to open a two-way connection with the user, our agent device needs to call `myEndpoint.createConversation()` and pass it the address for the customer's Endpoint. 

    This is one major benefit of using the Twilio Video SDK, instead of handling the registration and setup yourself, you can simply call `createConversation()`.

    As soon as this completes we need to inject the video Streams on to the page. 

    Lastly we'll call a function that will delete the support ticket, but before we move on to that we need to talk about video Streams.


.step(data-title='Video Streams', data-file='app/assets/javascripts/app.js', data-highlight="51-65")
  :markdown
    ## Showing the Video Streams

    A Stream is a wrapper for the MediaStream object and provides us with a high-level API for muting, pausing and attaching to the DOM. 

    In this function what we are doing is attaching our Streams to the video elements we created to display the video.

    Before we can attach the remote video we need to make sure that the remote participant has joined, which we can do by listening for the `participantConnected` event on the Conversation.

    At this point we have two live video streams on the page! The last piece is controlling the video and ending the call. 

.step(data-title='All Done', data-file='app/assets/javascripts/app.js')
  :markdown
    ## All Done

    Wow, that was quite an undertaking, but in reality we had to write very little code to get a real-time video call implemented into our support app.

    We'd also love to hear your feedback on this tutorial - [please reach out to us](mailto:help@twilio.com) with any questions you might have.  Thanks for checking out the tutorial!
    
  h2 Deploy This App
  p
  a(href="https://heroku.com/deploy?template=https://github.com/TwilioDevEd/video-service-rails")
    img(src="//camo.githubusercontent.com/c0824806f5221ebb7d25e559568582dd39dd1170/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e706e67", alt="Deploy", data-canonical-src="https://www.herokucdn.com/deploy/button.png", style="max-width:100%;") 










